<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	version="1.0">
	<classes>
		<class id="lnkContactToFunctionalCI">
			<fields>
				<field id="test" xsi:type="AttributeCustomFields" _delta="define">
					<handler_class>TestHandler</handler_class>
				</field>
				<field id="status" xsi:type="AttributeEnum" _delta="define">
					<sql>status</sql>
					<values>
						<value id="production">production</value>
					</values>
					<default_value>production</default_value>
					<is_null_allowed>false</is_null_allowed>
				</field>
			</fields>
			<!--
			<lifecycle _delta="define">
				<attribute>status</attribute>
				<stimuli>
					<stimulus id="ev_test" xsi:type="StimulusInternal"/>
				</stimuli>
				<states>
					<state id="production">
						<flags>
							<attribute id="test">
								<read_only/>
							</attribute>
						</flags>
						<transitions>
							<transition id="production">
								<stimulus>ev_test</stimulus>
								<target>production</target>
								<actions></actions>
							</transition>
						</transitions>
					</state>
				</states>
			</lifecycle>
			-->
			<methods>
				<method id="GetInitialStateAttributeFlags" _delta="define">
					<static>false</static>
					<access>public</access>
					<type>Overload-iDisplay</type>
					<code><![CDATA[
					public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
					{
						// doc 链接自动生成
						if($sAttCode == "test") {
							return OPT_ATT_READONLY;
						} else {
							return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
						}
					}
					]]>
					</code>
				</method>
				<method id="GetAttributeFlags" _delta="define">
					<static>false</static>
					<access>public</access>
					<type>Overload-iDisplay</type>
					<code><![CDATA[
					// 不允许修改组成friendlyname的属性
					public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
					{
						// doc 链接自动生成
						if($sAttCode == "test") {
							return OPT_ATT_READONLY;
						}
						return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
					}
					]]>
					</code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="test">
							<rank>10</rank>
						</item>
					</items>
				</details>
				<default_search>
					<items>
						<item id="test">
							<rank>10</rank>
						</item>
					</items>
				</default_search>
				<list>
					<items>
						<item id="test">
							<rank>10</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="PhysicalDevice">
			<fields>
				<field id="brand_id" xsi:type="AttributeExternalKey"  _delta="redefine">
					<sql>brand_id</sql>
					<target_class>Brand</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_MANUAL</on_target_delete>
					<filter>SELECT Brand AS b JOIN Model AS m ON m.brand_id=b.id WHERE m.type=:this->finalclass</filter>
				</field>
			</fields>
		</class>
		<class id="FunctionalCI">
			<properties>
				<uniqueness_rules>
					<rule id="functionalci_name" _delta="define">
					<!-- field or combination of "FunctionalCI" fields which must be unique -->
						<attributes>
						  <attribute id="name"/>
						  <attribute id="finalclass"/>
						</attributes>
						<is_blocking>false</is_blocking>
					</rule>
				</uniqueness_rules>
			</properties>
		</class>
		<class id="OpsLearn"
			_delta="define">
			<parent>cmdbAbstractObject</parent>
			<properties>
				<category>bizmodel,searchable</category>
				<abstract>false</abstract>
				<key_type>autoincrement</key_type>
				<db_table>opslearn</db_table>
				<db_key_field>id</db_key_field>
				<db_final_class_field/>
				<naming>
					<attributes>
						<attribute id="ip_id"/>
					</attributes>
				</naming>
				<display_template/>
				<reconciliation>
					<attributes>
						<attribute id="ip_id"></attribute>
					</attributes>
				</reconciliation>
			</properties>

			<fields>
				<field id="org_id"
					xsi:type="AttributeExternalKey"
					_delta="define">
					<sql>org_id</sql>
					<is_null_allowed>true</is_null_allowed>
					<target_class>Organization</target_class>
					<on_target_delete>DEL_MANUAL</on_target_delete>
				</field>

				<!-- 测试直接使用 IPObject，使一个对象能链接到 IPAddress，Subnet，IP Range, Subnet Block 所有对象 -->
				<field id="ip_id"
					xsi:type="AttributeExternalKey"
					_delta="define">
					<filter>SELECT IPObject WHERE finalclass IN ('IPv4Address', 'IPv4Range', 'IPv4Subnet') AND org_id = :this->org_id</filter>
					<sql>ip_id</sql>
					<is_null_allowed>true</is_null_allowed>
					<target_class>IPObject</target_class>
					<on_target_delete>DEL_MANUAL</on_target_delete>
					<dependencies>
						<attribute id="org_id"/>
					</dependencies>
				</field>
				<field id="ip_name"
					xsi:type="AttributeExternalField"
					_delta="define">
					<extkey_attcode>ip_id</extkey_attcode>
					<target_attcode>friendlyname</target_attcode>
				</field>
				<field id="jira" xsi:type="AttributeJira" _delta="define">
					<sql>jira</sql>
					<default_value>http://a.com/</default_value>
					<is_null_allowed>true</is_null_allowed>
				</field>
			</fields>
			<methods>
				<method id="DisplayModifyForm">
					<static>false</static>
					<access>public</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[
						public function DisplayModifyForm(WebPage $oPage, $aExtraParams = array())
						{
							$oPage->add_ready_script('
							function AutoSetIpId() {
								var ip = $("[name=attr_ip_id] option:selected").text();
								console.log(ip);
								$("[name=attr_jira]").val("http://a.com/" + ip);
							}
							$("#field_2_ip_id").delegate("[name=attr_ip_id]", "change", AutoSetIpId);
							');
							parent::DisplayModifyForm($oPage, $aExtraParams);
						}
					]]>
					</code>
				</method>
			</methods>
			<presentation>
				<default_search _delta="must_exist">
					<items>
						<item id="org_id"
							_delta="define">
							<rank>20</rank>
						</item>
						<item id="ip_id"
							_delta="define">
							<rank>25</rank>
						</item>
						<item id="jira">
							<rank>30</rank>
						</item>
					</items>
				</default_search>
				<details>
					<items>
						<item id="org_id"
							_delta="define">
							<rank>5</rank>
						</item>
						<item id="ip_id">
							<rank>10</rank>
						</item>
						<item id="jira">
							<rank>30</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="ip_id">
							<rank>10</rank>
						</item>
						<item id="jira">
							<rank>30</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="ip_id">
							<rank>10</rank>
						</item>
						<item id="jira">
							<rank>30</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="Server">
			<presentation>
				<details>
					<items>
						<item id="col:col1">
							<rank>120</rank>
							<items>
								<item id="fieldset:Server:moreinfo">
									<rank>20</rank>
									<items>
										<item id="managementip_id" _delta="delete"/>
									</items>
								</item>
							</items>
						</item>
					</items>
				</details>
			</presentation>
		</class>
		<class id="NetworkDeviceType">
			<fields>
				<field id="icon" xsi:type="AttributeImage" _delta="define">
					<default_image>../itop-config-mgmt/images/switch.png</default_image>
					<is_null_allowed>true</is_null_allowed>
					<tracking_level>none</tracking_level>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="icon" _delta="define">
							<rank>20</rank>
						</item>
					</items>
				</details>
			</presentation>
		</class>
		<class id="NetworkDevice">
			<methods>
				<method id="GetIcon" _delta="define">
					<static>false</static>
					<access>public</access>
					<type>Overload-DBObject</type>
					<code><![CDATA[
                        public function GetIcon($bImgTag = true)
                        {
                            $aDefaultConf = array("Router" => "images/router.png", "Switch" => "images/switch.png");
                            $aConf = MetaModel::GetModuleSetting("opsitop-main","networkdevice_icon", $aDefaultConf);
                            $sDeviceType = $this->Get("networkdevicetype_name");
                            if(array_key_exists($sDeviceType, $aConf)) {
                                $sEnv = MetaModel::GetEnvironment();
                                $sIcon = '../env-' . $sEnv . '/opsitop-main/' . $aConf[$sDeviceType];
                                if($bImgTag) {
                                    return '<img src="' . $sIcon . '">';
                                } else {
                                    return $sIcon;
                                }
                            } else {
                                return parent::GetIcon($bImgTag);
                            }
                        }
					]]>
					</code>
				</method>
			</methods>
		</class>
	</classes>
	<menus>
		<menu id="OpsLearn"
			xsi:type="OQLMenuNode"
			_delta="define">
			<rank>7</rank>
			<parent>SearchCIs</parent>
			<oql>SELECT OpsLearn</oql>
			<do_search>1</do_search>
		</menu>
	</menus>
	<snippets>
	</snippets>
</itop_design>


